#BlueJ class context
comment0.target=MyArrayListTest
comment0.text=\n\ A\ class\ with\ unit\ tests\ for\ a\ MyList\ list\ implementation.\n\ It\ tests\ the\ MyArrayList\ class\ but\ is\ designed\ to\ be\ able\ to\n\ be\ extended\ for\ testing\ other\ MyList\ implementations.\n\ For\ that,\ subclasses\ need\ only\ override\ the\ createEmptyLongList()\ \n\ method.\n\n\ The\ tests\ try\ to\ test\ all\ methods\ and\ corner\ cases.\n\ We\ recommend\ you\ tackle\ them\ (i.e.\ try\ to\ make\ them\ pass)\ in\ the\ \n\ order\ they\ appear\ in\ this\ file.\n\n\ @author\ \ Rui\ Meireles\n\ @version\ 1.2\n
comment1.params=
comment1.target=MyCollection\ createEmptyLongCollection()
comment1.text=\n\ Overrides\ collection\ creation\ factory\ method.\n\ \n\ @return\ an\ empty\ list\ of\ long\ integers.\n
comment10.params=
comment10.target=void\ testList5AddIndexed()
comment10.text=\n\ Tests\ element\ addition\ (indexed\ version).\n\ Test\ assumes\ size(),\ get(),\ indexOf(),\ and\ remove()\ are\ working\ properly.\n
comment11.params=
comment11.target=void\ testList6ToString()
comment11.text=\n\ Tests\ the\ list's\ toString()\ to\ see\ if\ it\ conforms\ with\ the\ specification.\n
comment2.params=
comment2.target=MyList\ createEmptyLongList()
comment2.text=\n\ A\ factory\ method\ to\ create\ an\ empty\ list\ of\ integers\ using\ the\ \n\ implementation\ of\ MyList\ we're\ trying\ to\ test.\n\ \n\ @return\ an\ empty\ list\ of\ long\ integers.\n
comment3.params=
comment3.target=void\ testList1AddTailAndSize()
comment3.text=\n\ Tests\ whether\ adding\ nodes\ at\ the\ tail\ of\ the\ list\ is\ reflected\ on\ the\ list's\ size.\n
comment4.params=
comment4.target=void\ testList2AddTailAndIndexOf()
comment4.text=\n\ Tests\ adding\ at\ the\ tail\ of\ the\ list\ and\ checking\ the\ elements\ are\ at\ the\ proper\ indices.\n
comment5.params=
comment5.target=void\ testList3AddTailAndGet()
comment5.text=\n\ Tests\ adding\ at\ the\ tail\ of\ the\ list\ and\ then\ retrieving\ the\ elements\ that\ have\ been\ added.\n
comment6.params=list\ low\ high\ offset
comment6.target=void\ checkListContents(MyList,\ int,\ int,\ int)
comment6.text=\n\ Checks\ list\ contains\ integers\ from\ low+offset\ to\ high+offset,\ in\ order,\ at\ indices\ low\ to\ high.\n\ @param\ list\ The\ list\ we're\ checking.\n\ @param\ low\ The\ smallest\ index\ we're\ checking.\n\ @param\ high\ The\ largest\ index\ we're\ checking.\n\ @param\ offset\ The\ values'\ offset\ relative\ to\ the\ index\ they're\ stored\ at.\ \n
comment7.params=list\ idx\ val
comment7.target=void\ testRemoveSingle(MyList,\ int,\ int)
comment7.text=\n\ A\ helper\ to\ avoid\ code\ duplication.\ \n\ Removes\ item\ at\ index\ idx\ (expected\ value\ val)\n\ from\ a\ list\ that\ is\ supposed\ to\ contain\ integers\n\ 0\ through\ the\ list's\ size\ -1.\n\ \n\ @param\ list\ the\ list\ to\ remove\ from.\n\ @param\ idx\ the\ index\ of\ the\ item\ that\ should\ be\ removed.\n\ @param\ vale\ the\ expected\ value\ of\ the\ item\ to\ be\ removed.\n
comment8.params=
comment8.target=void\ testList4Remove()
comment8.text=\n\ Tests\ element\ removal.\n\ Test\ assumes\ add()\ (tail\ version),\ size(),\ get(),\ and\ indexOf()\ are\ working\ properly.\n
comment9.params=
comment9.target=void\ test4bRemoveAtCapacity()
comment9.text=\n\ Tests\ element\ removal\ on\ special\ case\ where\ the\ array\ is\ at\ capacity\ and\ the\ element\ \n\ being\ removed\ is\ the\ one\ at\ the\ list's\ tail.\n\ Test\ assumes\ add()\ (tail\ version),\ size(),\ get(),\ and\ indexOf()\ are\ working\ properly.\n
numComments=12
