#BlueJ class context
comment0.target=MyArrayList
comment0.text=\n\ A\ class\ that\ implements\ the\ MyList<E>\ interface\ using\ an\ array.\n\n\ @author\ Rommel\ Lantajo\ II\n\ @version\ 1.0\n
comment1.params=capacity
comment1.target=MyArrayList(int)
comment1.text=\n\ Constructor\ used\ to\ create\ an\ empty\ list\ using\ \n\ an\ array\ with\ the\ specified\ capacity.\n\ \n\ @param\ capacity\ initial\ array\ capacity.\n\ @return\ an\ empty\ list.\n
comment10.params=elem
comment10.target=boolean\ remove(java.lang.Object)
comment10.text=\n\ Removes\ an\ element\ from\ the\ collection.\n\n\ @param\ elem\ the\ element\ to\ be\ removed\ from\ the\ collection.\n\ @return\ true\ if\ the\ collection\ changed\ as\ a\ result\ of\ this\ addition,\ false\ otherwise.\n
comment11.params=elem
comment11.target=boolean\ contains(java.lang.Object)
comment11.text=\n\ Checks\ whether\ the\ element\ passed\ as\ an\ argument\ is\ present\ in\ the\ collection.\n\n\ @param\ elem\ the\ element\ whose\ presence\ is\ to\ be\ tested.\n\ @return\ true\ if\ the\ element\ is\ present\ in\ the\ collection;\ false\ otherwise.\n
comment12.params=
comment12.target=MyIterator\ iterator()
comment12.text=\n\ Returns\ an\ iterator\ that\ lets\ traverse\ the\ collection.\n\n\ @return\ an\ iterator\ object\ associated\ with\ the\ collection.\n
comment2.params=
comment2.target=MyArrayList()
comment2.text=\n\ Constructor\ used\ to\ create\ an\ empty\ list\ using\ \n\ an\ array\ with\ the\ default\ capacity\ of\ 10.\n\ \n\ @param\ capacity\ initial\ array\ capacity.\n\ @return\ an\ empty\ list.\n
comment3.params=
comment3.target=int\ size()
comment3.text=\n\ Returns\ the\ number\ of\ elements\ on\ the\ list.\n\n\ @return\ the\ number\ of\ elements\ on\ the\ list.\n
comment4.params=elem
comment4.target=boolean\ add(java.lang.Object)
comment4.text=\n\ Appends\ a\ new\ element\ to\ the\ end\ of\ the\ list.\n\n\ @param\ elem\ the\ element\ to\ add\ to\ the\ list.\n\ @return\ always\ returns\ true.\n
comment5.params=idx\ elem
comment5.target=void\ add(int,\ java.lang.Object)
comment5.text=\n\ Adds\ a\ new\ element\ to\ the\ list\ at\ the\ index\ specified\ as\ an\ argument.\n\n\ @param\ \ idx\ \ the\ index\ at\ which\ the\ new\ element\ should\ be\ found\ once\ it\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ has\ been\ added\ to\ the\ list.\n\ @param\ elem\ the\ element\ to\ add\ to\ the\ list.\n\ @throws\ IndexOutOfBoundsException\ if\ index\ not\ in\ range\ [0,size()].\n
comment6.params=idx
comment6.target=java.lang.Object\ remove(int)
comment6.text=\n\ Removes\ and\ returns\ the\ list\ element\ located\ at\ the\ index\ specified\ as\ an\ argument.\n\n\ @param\ idx\ the\ index\ at\ which\ the\ element\ to\ be\ removed\ resides.\n\ @return\ the\ element\ removed.\n\ @throws\ IndexOutOfBoundsException\ if\ index\ not\ in\ range\ [0,size()-1]\n
comment7.params=idx
comment7.target=java.lang.Object\ get(int)
comment7.text=\n\ Returns\ the\ list\ element\ stored\ at\ the\ index\ specified\ as\ an\ argument.\n\n\ @param\ idx\ the\ index\ of\ the\ element\ to\ be\ retrieved.\n\ @return\ the\ element\ at\ the\ specified\ index.\n\ @throws\ IndexOutOfBoundsException\ if\ index\ not\ in\ range\ [0,size()-1].\n\ \n
comment8.params=elem
comment8.target=int\ indexOf(java.lang.Object)
comment8.text=\n\ Returns\ the\ index\ at\ which\ the\ element\ passed\ as\ an\ argument\ can\ be\ found\n\ on\ the\ list.\ Equality\ is\ determined\ by\ the\ equals(Object\ o)\ method,\n\ defined\ in\ the\ Object\ class,\ and\ potentially\ overridden\ by\ the\ element's\ class.\n\ If\ elem\ appears\ multiple\ times\ on\ the\ list,\ the\ lowest\ index\ at\ which\ it\ can\n\ be\ found\ is\ returned.\ If\ the\ element\ is\ not\ present\ in\ the\ list,\ -1\ is\ returned.\n\n\ @param\ elem\ the\ element\ we're\ trying\ to\ find.\n\ @return\ the\ index\ of\ the\ first\ ocurrence\ of\ elemement\ elem,\ or\ -1\ if\ not\ found.\n
comment9.params=
comment9.target=java.lang.String\ toString()
comment9.text=\n\ Returns\ a\ textual\ representation\ of\ the\ list\ elements\ in\ the\ format\ "{elem1,\ elem2,\ ..,\ elemn}".\n\ E.g.\ A\ list\ with\ elements\ 1,\ 2\ and\ 3\ should\ return\ "{1,\ 2,\ 3}".\n\ \n\ @return\ the\ string\ representation\ of\ the\ list.\n
numComments=13
